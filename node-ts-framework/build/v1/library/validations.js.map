{"version":3,"file":"validations.js","sourceRoot":"/","sources":["v1/library/validations.ts"],"names":[],"mappings":"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","sourcesContent":["import { functions } from \"./functions\";\n\nexport class validations {\n    constructor() { }\n\n    /**\n     * Function to check requested parameters received or not\n     * @param fields fields array to be check for validations\n     * @param req req.body object\n     * @param res response to be send through\n     */\n    validate(fields: any, req: any, res: any) {\n        let errorfields: any = new Array();\n        for (let key in fields) {\n            if (req[fields[key]] == undefined || String(req[fields[key]]).trim() == '') {\n                errorfields.push(fields[key]);\n            }\n        }\n\n        if (errorfields.length > 0) {\n            errorfields = errorfields.join(\", \");\n            let functionsObj: any = new functions();\n            res.send(functionsObj.output(0, 'Please provide ' + errorfields));\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Validate array values\n     * @param array array of key value pair\n     * @param required_values string array of required values\n     * @param res res object\n     */\n    validateArrayValues(required_values: any[], array: any[], res: any) {\n        let errorfields: any[] = [];\n        for (let i = 0; i < array.length; i++) {\n            for (let k = 0; k < required_values.length; k++) {\n                if (!array[i].hasOwnProperty(required_values[k])) {\n                    errorfields.push(required_values[k]);\n                }\n            }\n        }\n\n        if (errorfields.length == 0) return true;\n\n        let errorfields_string: string = errorfields.join(\", \");\n        let functionsObj: any = new functions();\n        res.send(functionsObj.output(0, 'Please provide all ' + errorfields_string));\n        return false;\n    }\n\n    /**\n     * Validate requet object with schema validation\n     * @param req req object\n     * @param res res object\n     * @param next next object to move on next function\n     * @param schema schema validation e.g:-\n     * const schema = Joi.object({\n            doctor_name: Joi.string().trim().replace(/'/g, \"\").required()\n        });\n        Ref.: https://joi.dev/api/?v=17.3.0\n     */\n    validateRequest(req: any, res: any, next: any, schema: any) {\n        const options = {\n            abortEarly: true, // include all errors\n            allowUnknown: true, // ignore unknown props\n            stripUnknown: false // remove unknown props\n        };\n\n        const { error, value } = schema.validate(req.body, options);\n        if (error) {\n            let functionsObj = new functions();\n            res.send(functionsObj.output(0, error.message));\n            return false;\n            // next(`Validation error: ${error.details.map(x => x.message).join(', ')}`);\n        } else {\n            req.body = value;\n            next();\n        }\n    }\n\n    /**\n     * Check whether mobile is valid or not\n     * @param mobile mobile - string\n     */\n    isMobileValid(mobile: string) {\n        if (mobile.trim().length !== 10) return false;\n        return true;\n    }\n}\n"]}