{"version":3,"file":"db.js","sourceRoot":"/","sources":["v1/library/db.ts"],"names":[],"mappings":"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","sourcesContent":["import { connection } from './connection';\n\nexport class db {\n\tpublic table: string = '';\n\tprivate connection: any = '';\n\tpublic query: string = '';\n\tpublic uniqueField: string = '';\n\tpublic where: string = '';\n\tpublic orderby: string = '';\n\tpublic rpp: number = 20;\n\tpublic page: number = 1;\n\tpublic limit: string = '';\n\tpublic url: string = '';\n\tpublic totalRecords: number = 0;\n\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * This function will execute given Query with checking of DB connection. It will return appropriate type of response in case of insert, update, delete, select etc.\n\t * @param query query string\n\t * @returns array | number\n\t */\n\tasync executeQuery(query: string) {\n\t\tthis.query = query;\n\t\tlet connectionObj = new connection();\n\n\t\ttry {\n\t\t\tthis.connection = await connectionObj.getConnection();\n\t\t\tif (!this.connection) {\n\t\t\t\tthrow 'Not connected to database.';\n\t\t\t}\n\n\t\t\tlet result = await this.connection.query(query);\n\t\t\tif (!result) return false;\n\n\t\t\tif (result.command == \"INSERT\") {\n\t\t\t\tif (this.uniqueField != '') return result['rows'][0]['id'];\n\t\t\t\telse return result['rowCount'];\n\t\t\t}\n\t\t\telse if (result.command == \"UPDATE\") return result['rowCount'];\n\t\t\telse if (result.command == \"REPLACE\") return result['rowCount'];\n\t\t\telse if (result.command == \"DELETE\") return result['rowCount'];\n\t\t\telse return result.rows;\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Select records from DB with appropriate table and required where conditions. This function will use in SelectRecord, allRecords, list Records function with appropriate parameters.\n\t * @param table table name\n\t * @param fields fields of DB\n\t * @param where where condition\n\t * @param orderby order by starting with \" ORDER BY\"\n\t * @param limit limit of DB records required\n\t * @returns array\n\t */\n\tselect(table: string, fields: string, where: string, orderby: string, limit: string) {\n\t\tlet query = 'SELECT ' + fields + ' FROM ' + table + ' ' + where + ' ' + orderby + ' ' + limit;\n\t\treturn this.executeQuery(query);\n\t}\n\n\t/**\n\t * Insert given data into given table. Given data should be key-value pair object with DB field name and it's value.\n\t * @param table table name\n\t * @param data array of data\n\t */\n\tinsert(table: string, data: any) {\n\t\tlet columnsArray: any = new Array();\n\t\tlet valuesArray: any = new Array();\n\n\t\tfor (let key in data) {\n\t\t\tcolumnsArray.push(key);\n\t\t\tvaluesArray.push(data[key]);\n\t\t}\n\t\tlet columns: string = columnsArray.join(',');\n\n\t\tfor (let i = 0; i < valuesArray.length; i++) {\n\t\t\tvaluesArray[i] = String(valuesArray[i]);\n\t\t\tvaluesArray[i] = valuesArray[i].replace(/'/g, \"\\''\");\n\t\t}\n\t\tlet values: string = valuesArray.join(\"','\");\n\n\t\tlet query = \"INSERT INTO \" + table + \"(\" + columns + \") values('\" + values + \"') RETURNING id\";\n\t\treturn this.executeQuery(query);\n\t}\n\n\t/**\n\t * Update given data into table with appropriate where condition.\n\t * @param table tablename\n\t * @param data key value pair array/object\n\t * @param where Where condition\n\t */\n\tupdate(table: string, data: any, where: string) {\n\t\tlet updatestring: string = '';\n\n\t\tfor (let key in data) {\n\t\t\tif (updatestring !== '') {\n\t\t\t\tupdatestring += ',';\n\t\t\t}\n\t\t\tif (data[key] == null) {\n\t\t\t\tupdatestring += key + \"=''\";\n\t\t\t} else {\n\t\t\t\tdata[key] = String(data[key]);\n\t\t\t\tupdatestring += key + \"='\" + data[key].replace(/'/g, \"\\''\") + \"'\";\n\t\t\t}\n\t\t}\n\n\t\tlet query = 'UPDATE ' + table + ' SET ' + updatestring + ' ' + where;\n\t\treturn this.executeQuery(query);\n\t}\n\n\t/**\n\t * Delete record from table with given where condition.\n\t * @param table tablename\n\t * @param where where condition\n\t */\n\tdelete(table: string, where: string) {\n\t\tlet query = 'DELETE FROM ' + table + ' ' + where;\n\t\treturn this.executeQuery(query);\n\t}\n\n\t/**\n\t * Select given fields from given table with unique id.\n\t * @param id table unique id\n\t * @param fields DB fields\n\t */\n\tselectRecord(id: number, fields = '*') {\n\t\treturn this.select(this.table, fields, 'WHERE ' + this.uniqueField + ' = ' + id, this.orderby, this.limit);\n\t}\n\n\t/**\n\t * Insert record into DB with given array\n\t * @param data key-value pair object\n\t */\n\tinsertRecord(data: any) {\n\t\treturn this.insert(this.table, data);\n\t}\n\n\t/**\n\t * Update given data with unique id\n\t * @param id unique id\n\t * @param data key-value pair array\n\t */\n\tupdateRecord(id: number, data: any) {\n\t\treturn this.update(this.table, data, ' WHERE ' + this.uniqueField + '=' + id);\n\t}\n\n\t/**\n\t * Delete record with given unique id\n\t * @param id unique id\n\t */\n\tdeleteRecord(id: number) {\n\t\treturn this.delete(this.table, ' WHERE ' + this.uniqueField + '=' + id);\n\t}\n\n\t/**\n\t * Return records with given fields and limit.\n\t * @param fields DB fields\n\t */\n\tasync listRecords(fields = '*') {\n\t\tlet start = (this.page - 1) * this.rpp;\n\t\tlet result = await this.select(this.table, fields, this.where, this.orderby, 'LIMIT ' + this.rpp + ' OFFSET ' + start);\n\t\treturn !result ? [] : result;\n\t}\n\n\t/**\n\t * Return all records with given where condition and order by.\n\t * @param fields fields\n\t */\n\tasync allRecords(fields = '*') {\n\t\tlet result = await this.select(this.table, fields, this.where, this.orderby, '');\n\t\treturn !result ? [] : result;\n\t}\n\n\t/**\n\t * Get count of records with given condition\n\t * @param table tablename\n\t * @param uniqueField unique fields\n\t * @param where where condition\n\t */\n\tasync selectCount(table: string, uniqueField: string, where: string) {\n\t\tlet query: string = 'SELECT count(' + uniqueField + ') as cnt FROM ' + table + ' ' + where;\n\t\tlet result: any[] = await this.executeQuery(query);\n\t\treturn result.length > 0 ? result[0].cnt : 0;\n\t}\n\n\t/**\n\t * Get total pages of records with given condition and given rpp.\n\t*/\n\tasync getTotalPages() {\n\t\tthis.totalRecords = await this.selectCount(this.table, this.uniqueField, this.where);\n\t\tlet totalpages: number = Math.ceil(this.totalRecords / this.rpp);\n\t\treturn totalpages;\n\t}\n}\n"]}