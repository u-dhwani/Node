{"version":3,"file":"functions.js","sourceRoot":"/","sources":["v1/library/functions.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAoC;AACpC,4CAAoB;AACpB,8CAAsB;AACtB,gDAAwB;AAExB,IAAI,WAAW,GAAQ,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,WAAW,CAAC;AAE1D,MAAa,SAAS;IAKlB;QAHO,iBAAY,GAAQ,EAAE,CAAC;QACpB,aAAQ,GAAW,EAAE,CAAC;QAG5B,uBAAuB;QACvB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,eAAe;QACX,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YACzD,IAAI,aAAa,GAAG,aAAG,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,cAAc,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YAC3G,SAAS,CAAC,mBAAmB,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,CAAC;QACD,OAAO,SAAS,CAAC,mBAAmB,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACH,qBAAqB,CAAC,IAAY,EAAE,QAAQ,GAAG,KAAK;QAChD,IAAI,QAAQ,EAAE,CAAC;YACX,OAAO,IAAA,oBAAU,EAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;QACnD,CAAC;aAAM,CAAC;YACJ,OAAO,IAAA,oBAAU,EAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,WAAmB,EAAE,cAAmB,EAAE,OAAY,IAAI;QAC7D,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YAAE,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAE1F,IAAI,MAAM,GAAG;YACT,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;YACnC,cAAc,EAAE,cAAc;YAC9B,QAAQ,EAAE,IAAA,oBAAU,EAAC,IAAI,IAAI,EAAE,EAAE,qBAAqB,CAAC;YACvD,IAAI,EAAE,IAAI;SACb,CAAC;QAEF;;;;YAII;QAEJ,OAAO,MAAM,CAAC;IAClB,CAAC;;AA5DL,8BA6DC;AA5DU,6BAAmB,GAAQ,EAAE,AAAV,CAAW","sourcesContent":["import dateFormat from 'dateformat';\nimport fs from \"fs\";\nimport ini from \"ini\";\nimport path from \"path\";\n\nlet ENVIRONMENT: any = process.env.APP_ENV || 'localhost';\n\nexport class functions {\n    static static_languagevars: any = {};\n    public languagevars: any = {};\n    protected language: string = '';\n\n    constructor() {\n        /* Get Language Data */\n        this.language = 'english';\n        this.languagevars = this.getLanguageData();\n    }\n\n    /**\n     * Get language.ini variable to available in whole app\n     */\n    getLanguageData() {\n        if (Object.keys(functions.static_languagevars).length == 0) {\n            let languageArray = ini.parse(fs.readFileSync(path.join(__dirname, '../../../', 'language.ini'), 'utf-8'));\n            functions.static_languagevars = languageArray[this.language];\n        }\n        return functions.static_languagevars;\n    }\n\n    /**\n     * Function to convert date in Long date format\n     * @param date Date\n     * @param showtime if want to show time or not\n     * @returns date in format of \"02 Aug 2019\" or \"02 Aug 2019 12:47 PM\"\n     */\n    DatabaseToDisplayDate(date: string, showtime = false) {\n        if (showtime) {\n            return dateFormat(date, 'dd mmm yyyy h:MM TT');\n        } else {\n            return dateFormat(date, 'dd mmm yyyy');\n        }\n    }\n\n    /**\n     * Send output to client with status code and message\n     * @param status_code status code of a response\n     * @param status_message status message of a response\n     * @param data response data\n     * @returns object with 3 parameters\n     */\n    output(status_code: number, status_message: any, data: any = null) {\n        if (this.languagevars[status_message]) status_message = this.languagevars[status_message];\n\n        let output = {\n            status_code: status_code.toString(),\n            status_message: status_message,\n            datetime: dateFormat(new Date(), 'yyyy-mm-dd HH:MM:ss'),\n            data: data\n        };\n\n        /* if (data.length > 0 || Object.keys(data).length) {\n            output.data = data;\n        } else {\n            delete output.data;\n        } */\n\n        return output;\n    }\n}\n"]}